* UI changes
#+begin_src emacs-lisp
    ;; gui config
  (setq inhibit-startup-screen t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (setq default-frame-alist (cons '(undecorated . t) 
				  (assq-delete-all 'undecorated default-frame-alist)))
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
  (set-frame-font "Monospace 11" nil t)
  ;; (global-hl-line-mode t)
  (setq scroll-conservatively 100)
#+end_src

** tab
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
** subword camelcasing
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** fullscreen modes
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
  (defun switch-fullscreen nil
    (interactive)
    (let* ((modes '(nil fullboth fullwidth fullheight))
	   (cm (cdr (assoc 'fullscreen (frame-parameters) ) ) )
	   (next (cadr (member cm modes) ) ) )
      (modify-frame-parameters
       (selected-frame)
       (list (cons 'fullscreen next)))))

  (define-key global-map [f11] 'switch-fullscreen)
#+end_src

* Terminal
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

* IDO
** enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

** switch buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src

* buffers

** enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** expert mode
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src

** always kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

** kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-x M-k") 'kill-all-buffers)
#+end_src

* dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Welcome back!")
    (setq dashboard-center-content nil)
    (setq dashboard-init-info ""))
#+end_src
* Convenient functions
** kill whole word
#+begin_src emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
    (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src

** copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
       (point-at-bol)
       (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src

** move line or marked region up and down M-<up> M-<down>
#+begin_src emacs-lisp
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg)
          (when (and (eval-when-compile
                       '(and (>= emacs-major-version 24)
                             (>= emacs-minor-version 3)))
                     (< arg 0))
            (forward-line -1)))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))


(global-set-key [M-up] 'move-text-up)
(global-set-key [M-down] 'move-text-down)
#+end_src

*** move line up
#+begin_src emacs-lisp
  ;; (defun move-line-up ()
  ;; (interactive)
  ;; (transpose-lines 1)
  ;; (forward-line -2))
  ;; (global-set-key (kbd "M-<up>") 'move-line-up)
#+end_src

*** move line down
#+begin_src emacs-lisp
  ;; (defun move-line-down ()
  ;; (interactive)
  ;; (forward-line 1)
  ;; (transpose-lines 1)
  ;; (forward-line -1))
  ;; (global-set-key (kbd "M-<down>") 'move-line-down)
#+end_src

** duplicate line or region C-c d
#+begin_src emacs-lisp
  (defun duplicate-line-or-region ()
  "Duplicate current line, or region if active."
  (interactive)
  (let (beg end (origin (point)))
    (if (use-region-p)
        ;; Duplicate region
        (setq beg (region-beginning)
              end (region-end))
      ;; Duplicate current line
      (setq beg (line-beginning-position)
            end (line-end-position)))
    (let ((region (buffer-substring beg end)))
      (goto-char end)
      (newline)
      (insert region)
      (goto-char origin))))
(global-set-key (kbd "C-c d") 'duplicate-line-or-region)
#+end_src

* Company for autocompletion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* Autocomplete brackets
#+begin_src emacs-lisp
  ;; autocomplete brackets
(electric-pair-mode 1)
#+end_src

* Whick key
#+begin_src emacs-lisp
  ;; which-key package
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

* Smex
#+begin_src emacs-lisp
  ;; smex package config
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

* Enable commands
#+begin_src emacs-lisp
  ;; enable disabled commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+end_src

* org
#+begin_src emacs-lisp
    ;;  (use-package org-modern
    ;;    :ensure t
    ;;    :hook
    ;;    (org-mode . org-modern-mode))
#+end_src
** shift select in org
#+begin_src emacs-lisp
  (setq org-support-shift-select 'always)
#+end_src

* yasnippet
#+begin_src emacs-lisp
;;    (use-package yasnippet
;;      ensure t)
#+end_src

* config.org edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src
** for colourful braces
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src

* window splitting cursor function
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* hungry-delete package
#+begin_src emacs-lisp
  ;; (use-package hungry-delete
  ;;   :ensure t
  ;;   :config (global-hungry-delete-mode))
#+end_src

* modeline
#+begin_src emacs-lisp
  ;;(use-package spaceline
  ;;  :ensure t
  ;;  :config
  ;;  (require 'spaceline-config)
  ;;  (setq powerline-default-separator (quote arrow))
  ;;  (spaceline-spacemacs-theme))
#+end_src
** show line and column number on modeline
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** clock
#+begin_src emacs-lisp
  (display-time-mode 1)
  ;;(setq display-time-format "%I:%M:%S")
  ;;(setq display-time-interval 1) 
#+end_src
** file size
#+begin_src emacs-lisp
  (size-indication-mode 1)
#+end_src
** battery mode
#+begin_src emacs-lisp
    (display-battery-mode 0)
#+end_src
** diminish (removes minor modes)
#+begin_src emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'hungry-delete-mode)
      (diminish 'which-key-mode)
      (diminish 'rainbow-mode)
      (diminish 'company-mode)
      (diminish 'subword-mode))
#+end_src

